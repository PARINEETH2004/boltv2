version: '3.8'

services:
  # Zookeeper - Coordination service for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - bda_network

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - bda_network

  # Hadoop NameNode
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.3.4-java11
    container_name: namenode
    environment:
      CLUSTER_NAME: weather_cluster
      CORE_CONF_FS_DEFAULT_NAME: hdfs://namenode:8020
      CORE_CONF_HADOOP_HEAPSIZE: 1024
      CORE_CONF_HADOOP_SECURITY_GROUPS_MAPPING_LDAP_URL: ldap://
      HDFS_CONF_DFS_NAMENODE_RPCBIND_HOST: 0.0.0.0
      HDFS_CONF_DFS_NAMENODE_NAME_DIR: /hadoop/dfs/name
      HDFS_CONF_DFS_REPLICATION: 1
    ports:
      - "9870:9870"
      - "8020:8020"
    volumes:
      - namenode_data:/hadoop/dfs/name
    networks:
      - bda_network

  # Hadoop DataNode
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.3.4-java11
    container_name: datanode
    depends_on:
      - namenode
    environment:
      CLUSTER_NAME: weather_cluster
      CORE_CONF_FS_DEFAULT_NAME: hdfs://namenode:8020
      CORE_CONF_HADOOP_HEAPSIZE: 1024
      CORE_CONF_HADOOP_SECURITY_GROUPS_MAPPING_LDAP_URL: ldap://
      HDFS_CONF_DFS_DATANODE_DATA_DIR: /hadoop/dfs/data
      HDFS_CONF_DFS_DATANODE_RPCBIND_HOST: 0.0.0.0
    ports:
      - "9864:9864"
    volumes:
      - datanode_data:/hadoop/dfs/data
    networks:
      - bda_network

  # Spark Master
  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_IP=spark-master
      - SPARK_MASTER_WEBUI_PORT=8080
    networks:
      - bda_network

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: spark-worker
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    environment:
      - SPARK_MODE=worker
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_WORKER_WEBUI_PORT=8081
      - SPARK_MASTER_URL=spark://spark-master:7077
    networks:
      - bda_network

  # Python Producer Service
  producer:
    build:
      context: .
      dockerfile: Dockerfile.producer
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY}
    networks:
      - bda_network
    restart: unless-stopped

  # Python Consumer Service
  consumer:
    build:
      context: .
      dockerfile: Dockerfile.consumer
    depends_on:
      - kafka
      - namenode
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      HADOOP_NAME_NODE: namenode:8020
    networks:
      - bda_network
    restart: unless-stopped

  # Flask Dashboard
  flask-app:
    build:
      context: .
      dockerfile: Dockerfile.flask
    depends_on:
      - namenode
      - spark-master
    ports:
      - "5000:5000"
    environment:
      HADOOP_NAME_NODE: namenode:8020
      SPARK_MASTER: spark://spark-master:7077
      FLASK_ENV: production
    volumes:
      - ./src/flask_app:/app
    networks:
      - bda_network
    restart: unless-stopped

volumes:
  namenode_data:
  datanode_data:

networks:
  bda_network:
    driver: bridge
